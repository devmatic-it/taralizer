ruleset:
  name: asvs
  title: OWASP Application Security Verification Standard
  description: OWAP security Standard
  url: https://github.com/OWASP/ASVS/raw/v4.0.2/4.0/OWASP%20Application%20Security%20Verification%20Standard%204.0.2-en.pdf
  version: 4.0.2
  rules:
  - rule:
    id: missing-authentication
    title: "Missing Authentication" 
    description: "Technical assets should autheticate incoming requests. "
    mitigation: "apply an authentication method to the technical asset."
    url: "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html"
    cwe: 306
    likelihood: 3 # high
    impact: 2 # medium

  - rule:
    id: insecure-proto
    title: "Unencrypted Communication" 
    description: "Data at transition should be encrypted. "
    mitigation: "apply an authentication method to the technical asset."
    url: "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html"
    cwe: 319
    likelihood: 3 #high
    impact: 2 # medium

  - rule:
    id: missing-vault
    title: "Missing Vault (Secret Storage)"
    description: > 
      In order to avoid the risk of secret leakage via config files (when attacked through vulnerabilities being able to
      read files like Path-Traversal and others), it is best practice to use a separate hardened process with proper authentication
      authorization, and audit logging to access config secrets (like credentials, private keys, client certificates, etc.).
      This component is usually some kind of Vault.
    url: https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html
    mitigation: Consider using a Vault (Secret Storage) to securely store and access config secrets (like credentials, private keys, client certificates, etc.)
    stride: Information Disclosure
    likelihood: 1 #Low
    impact: 1 #Low
    cwe: 522

  - rule:
    id: missing-waf
    title: "Missing Web Application Firewall (WAF)"
    description: >
      To have a first line of filtering defense, security architectures with web-services or web-applications should include a WAF in front of them.
      Even though a WAF is not a replacement for security (all components must be secure even without a WAF) it adds another layer of defense to the overall
      system by delaying some attacks and having easier attack alerting through it
    url: https://cheatsheetseries.owasp.org/cheatsheets/Virtual_Patching_Cheat_Sheet.html
    mitigation: "Consider placing a fully-managed Web Application Firewall (WAF) in front of the web-services and/or web-applications" 
    stride: Tampering
    likelihood: 1 #low
    impact: 1 #low
    cwe: 1008

  - rule:
    id: cross-site-scripting
    title: "Cross-Site Scripting (XSS)"
    description: >
      For each web application Cross-Site Scripting (XSS) risks might arise. In terms
      of the overall risk level take other applications running on the same domain into account as well.
    url: https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    mitigation: > 
      Try to encode all values sent back to the browser and also handle DOM-manipulations
      in a safe way to avoid DOM-based XSS. When a third-party product is used instead of custom developed software, 
      check if the product applies the proper mitigation and ensure a reasonable patch-level.
    stride: Tampering
    likelihood: 2 #medium
    impact: 2 #medim
    cwe: 79

  - rule:
    id: container-baseimage-backdooring
    title: "Container Base Image Backdooring"
    description: >
      When a technical asset is built using container technologies, Base Image Backdooring risks might arise where
      base images and other layers used contain vulnerable components or backdoors
    url: https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
    mitigation: >
      Apply hardening of all container infrastructures (see for example the CIS-Benchmarks for Docker and Kubernetes and the Docker Bench for Security
      Use only trusted base images of the original vendors, verify digital signatures and apply image creation best practices.
      Also consider using Google's Distroless base images or otherwise very small base images.
      Regularly execute container image scans with tools checking the layers for vulnerable components.
    stride: Tampering
    likelihood: 2
    impact: 2
    cwe: 912

  - rule:
    id: cross-site-request-forgery
    title: Cross-Site Request Forgery (CSRF)
    description: When a web application is accessed via web protocols Cross-Site Request Forgery (CSRF) risks might arise.
    url: https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
    mitigation: >
      Try to use anti-CSRF tokens ot the double-submit patterns (at least for logged-in requests).
      When your authentication scheme depends on cookies (like session or token cookies), consider marking them with the same-site flag.
      When a third-party product is used instead of custom developed software, check if the product applies the proper mitigation and ensure a reasonable patch-level
    stride: Spoofing
    likelihood: 3
    impact: 1
    cwe: 352
